/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.admin;

import dao.TypeChambreDAO;
import models.TypeChambre;
import java.util.List;

/**
 *
 * @author diaom
 */
public class ChambreForm extends javax.swing.JFrame {

    private AdminDashboard parentDashboard = null;
    private models.Chambre chambreToEdit = null;

    /**
     * Creates new form ChambreForm
     */
    public ChambreForm() {
        this(null);
    }
    public ChambreForm(AdminDashboard parent) {
        this.parentDashboard = parent;
        initComponents();
        // Initialisation des comboBox
        chargerTypesChambre();
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "disponible", "occupee", "maintenance", "nettoyage" }));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerChambre();
            }
        });
    }
    public ChambreForm(AdminDashboard parent, models.Chambre chambre) {
        this(parent);
        this.chambreToEdit = chambre;
        // Pré-remplir les champs
        jTextField1.setText(chambre.getNumero());
        jTextField2.setText(String.valueOf(chambre.getEtage()));
        jComboBox2.setSelectedItem(chambre.getStatut().name().toLowerCase());
        for (int i = 0; i < jComboBox1.getItemCount(); i++) {
            TypeChambreItem item = jComboBox1.getItemAt(i);
            if (item.getId() == chambre.getTypeChambreId()) {
                jComboBox1.setSelectedIndex(i);
                break;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("numéro de la chambre");

        jLabel2.setText("étage");

        jLabel3.setText("type de chambre");

        jLabel4.setText("Statut");

        jTextField1.setText(" ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>());

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Valider");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jComboBox1, 0, 107, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(jButton1)))
                .addContainerGap(169, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(91, 91, 91))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chargerTypesChambre() {
        try {
            List<TypeChambre> types = TypeChambreDAO.findAll();
            jComboBox1.removeAllItems();
            for (TypeChambre t : types) {
                jComboBox1.addItem(new TypeChambreItem(t.getId(), t.getNom()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Classe utilitaire pour le comboBox
    public static class TypeChambreItem {
        private int id;
        private String nom;
        public TypeChambreItem(int id, String nom) { this.id = id; this.nom = nom; }
        public int getId() { return id; }
        public String getNom() { return nom; }
        @Override public String toString() { return nom; }
    }

    // Déclaration des variables
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtEtage;
    private javax.swing.JComboBox<TypeChambreItem> comboTypeChambre;
    private javax.swing.JComboBox<String> comboStatut;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JButton btnValider;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChambreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChambreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChambreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChambreForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChambreForm(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<TypeChambreItem> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void validerChambre() {
        try {
            String numero = jTextField1.getText().trim();
            int etage = Integer.parseInt(jTextField2.getText().trim());
            TypeChambreItem selectedType = (TypeChambreItem) jComboBox1.getSelectedItem();
            String statut = (String) jComboBox2.getSelectedItem();

            if (numero.isEmpty() || selectedType == null || statut == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Veuillez remplir tous les champs obligatoires.");
                return;
            }

            models.Chambre chambre = (chambreToEdit == null) ? new models.Chambre() : chambreToEdit;
            chambre.setNumero(numero);
            chambre.setEtage(etage);
            chambre.setTypeChambreId(selectedType.getId());
            chambre.setStatut(enums.Enums.StatutChambre.valueOf(statut.toUpperCase()));
            chambre.setDescription(null);
            chambre.setUpdatedAt(java.time.LocalDateTime.now());
            if (chambreToEdit == null) {
                chambre.setCreatedAt(java.time.LocalDateTime.now());
                dao.ChambreDAO.insert(chambre);
                javax.swing.JOptionPane.showMessageDialog(this, "Chambre ajoutée avec succès !");
            } else {
                dao.ChambreDAO.update(chambre);
                javax.swing.JOptionPane.showMessageDialog(this, "Chambre modifiée avec succès !");
            }
            if (parentDashboard != null) {
                parentDashboard.chargerChambresDansTable();
            }
            this.dispose();
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Erreur lors de l'enregistrement de la chambre : " + e.getMessage());
        }
    }
}
